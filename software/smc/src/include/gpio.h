#ifndef __GPIO_H__
#define __GPIO_H__

#include <em_device.h>
#include "cmu.h"
#include "systick.h"
#include "utils.h"
#include "nvic.h"

// LED MACROS
#define LED_HIGH()          PERI_REG_BIT_SET(&(GPIO->P[0].DOUT)) = BIT(15)
#define LED_LOW()           PERI_REG_BIT_CLEAR(&(GPIO->P[0].DOUT)) = BIT(15)
#define LED_TOGGLE()        GPIO->P[0].DOUTTGL = BIT(15);

// DSP MACROS
#define DSP_RESET()         PERI_REG_BIT_CLEAR(&(GPIO->P[1].DOUT)) = BIT(10)
#define DSP_UNRESET()       PERI_REG_BIT_SET(&(GPIO->P[1].DOUT)) = BIT(10)
#define DSP_SELECT()        PERI_REG_BIT_CLEAR(&(GPIO->P[0].DOUT)) = BIT(3)
#define DSP_UNSELECT()      PERI_REG_BIT_SET(&(GPIO->P[0].DOUT)) = BIT(3)

// FPGA MACROS
#define FPGA_SOFT_RESET()   PERI_REG_BIT_CLEAR(&(GPIO->P[0].DOUT)) = BIT(5)
#define FPGA_SOFT_UNRESET() PERI_REG_BIT_SET(&(GPIO->P[0].DOUT)) = BIT(5)
#define FPGA_HARD_RESET()   PERI_REG_BIT_CLEAR(&(GPIO->P[1].DOUT)) = BIT(6)
#define FPGA_HARD_UNRESET() PERI_REG_BIT_SET(&(GPIO->P[1].DOUT)) = BIT(6)
#define FPGA_SELECT()       PERI_REG_BIT_CLEAR(&(GPIO->P[2].DOUT)) = BIT(0)
#define FPGA_UNSELECT()     PERI_REG_BIT_SET(&(GPIO->P[2].DOUT)) = BIT(0)
#define FPGA_CFG_DONE()     PERI_REG_BIT(&(GPIO->P[1].DIN), 1)

// I2S BRIDGE MACROS
#define I2S_BRG_CFG_EN()    PERI_REG_BIT_CLEAR(&(GPIO->P[1].DOUT)) = BIT(12)
#define I2S_BRG_CFG_DIS()   PERI_REG_BIT_SET(&(GPIO->P[1].DOUT)) = BIT(12)
#define I2S_BRG_RESET()     PERI_REG_BIT_CLEAR(&(GPIO->P[1].DOUT)) = BIT(13)
#define I2S_BRG_UNRESET()   PERI_REG_BIT_SET(&(GPIO->P[1].DOUT)) = BIT(13)

// CODEC MACROS
#define CODEC_RESET()       PERI_REG_BIT_CLEAR(&(GPIO->P[3].DOUT)) = BIT(0)
#define CODEC_UNRESET()     PERI_REG_BIT_SET(&(GPIO->P[3].DOUT)) = BIT(0)

// RXADC MACROS
#define RXADC_POWER_DOWN()  PERI_REG_BIT_SET(&(GPIO->P[0].DOUT)) = BIT(12)
#define RXADC_POWER_UP()    PERI_REG_BIT_CLEAR(&(GPIO->P[0].DOUT)) = BIT(12)
#define RXADC_DITHER_ON()   PERI_REG_BIT_SET(&(GPIO->P[0].DOUT)) = BIT(13)
#define RXADC_DITHER_OFF()  PERI_REG_BIT_CLEAR(&(GPIO->P[0].DOUT)) = BIT(13)
#define RXADC_GAIN_X1P5()   PERI_REG_BIT_SET(&(GPIO->P[0].DOUT)) = BIT(13)
#define RXADC_GAIN_X1()     PERI_REG_BIT_CLEAR(&(GPIO->P[0].DOUT)) = BIT(13)

// TXPLL MACROS
#define TXPLL_ENABLE()      PERI_REG_BIT_SET(&(GPIO->P[5].DOUT)) = BIT(7)
#define TXPLL_DISABLE()     PERI_REG_BIT_CLEAR(&(GPIO->P[5].DOUT)) = BIT(7)
#define TXPLL_LATCH()       PERI_REG_BIT_SET(&(GPIO->P[3].DOUT)) = BIT(12)
#define TXPLL_UNLATCH()     PERI_REG_BIT_CLEAR(&(GPIO->P[3].DOUT)) = BIT(12)
#define TXPLL_UNMUTE()      PERI_REG_BIT_SET(&(GPIO->P[5].DOUT)) = BIT(8)
#define TXPLL_MUTE()        PERI_REG_BIT_CLEAR(&(GPIO->P[5].DOUT)) = BIT(8)
#define TXPLL_LOCKED()      PERI_REG_BIT(&(GPIO->P[5].DIN), 9)

// TXDAC MACROS
#define TXDAC_RESET()       PERI_REG_BIT_SET(&(GPIO->P[4].DOUT)) = BIT(12)
#define TXDAC_UNRESET()     PERI_REG_BIT_CLEAR(&(GPIO->P[4].DOUT)) = BIT(12)
#define TXDAC_SELECT()      PERI_REG_BIT_CLEAR(&(GPIO->P[4].DOUT)) = BIT(9)
#define TXDAC_UNSELECT()    PERI_REG_BIT_SET(&(GPIO->P[4].DOUT)) = BIT(9)

// TXMIXER MACROS
#define TXMIXER_ENABLE()    PERI_REG_BIT_SET(&(GPIO->P[4].DOUT)) = BIT(15)
#define TXMIXER_DISABLE()   PERI_REG_BIT_CLEAR(&(GPIO->P[4].DOUT)) = BIT(15)

// TXPA MACROS
#define TXPA_BIAS_ENABLE()  PERI_REG_BIT_SET(&(GPIO->P[4].DOUT)) = BIT(10)
#define TXPA_BIAS_DISABLE() PERI_REG_BIT_CLEAR(&(GPIO->P[4].DOUT)) = BIT(10)
#define TXPA_OVERCURRENT()  !PERI_REG_BIT(&(GPIO->P[4].DIN), 11)

// CLOCK MANAGER MACROS
#define CLK_MNGR_OUT_EN()   PERI_REG_BIT_CLEAR(&(GPIO->P[5].DOUT)) = BIT(12)
#define CLK_MNGR_OUT_DIS()  PERI_REG_BIT_SET(&(GPIO->P[5].DOUT)) = BIT(12)
#define CLK_MNGR_REF_EN()   PERI_REG_BIT_SET(&(GPIO->P[5].DOUT)) = BIT(6)
#define CLK_MNGR_REF_DIS()  PERI_REG_BIT_CLEAR(&(GPIO->P[5].DOUT)) = BIT(6)

// POWER MACROS
#define PWR_3V3_PGOOD()     PERI_REG_BIT(&(GPIO->P[2].DIN), 8)
#define PWR_3V6_ANA_PGOOD() PERI_REG_BIT(&(GPIO->P[2].DIN), 10)
#define PWR_1V2_PGOOD()     PERI_REG_BIT(&(GPIO->P[2].DIN), 11)

// TFT MACROS
#define TFT_RESET()         PERI_REG_BIT_CLEAR(&(GPIO->P[3].DOUT)) = BIT(7)
#define TFT_UNRESET()       PERI_REG_BIT_SET(&(GPIO->P[3].DOUT)) = BIT(7)
#define TFT_SELECT()        PERI_REG_BIT_CLEAR(&(GPIO->P[0].DOUT)) = BIT(10)
#define TFT_UNSELECT()      PERI_REG_BIT_SET(&(GPIO->P[0].DOUT)) = BIT(10)
#define TFT_SETUP_CMD()     PERI_REG_BIT_CLEAR(&(GPIO->P[3].DOUT)) = BIT(4)
#define TFT_SETUP_DAT()     PERI_REG_BIT_SET(&(GPIO->P[3].DOUT)) = BIT(4)

// TFT TOUCH MACROS
#define TFT_TOUCH_RESET()   PERI_REG_BIT_CLEAR(&(GPIO->P[3].DOUT)) = BIT(3)
#define TFT_TOUCH_UNRESET() PERI_REG_BIT_SET(&(GPIO->P[3].DOUT)) = BIT(3)

void gpio_init();

#endif  // __GPIO_H__
